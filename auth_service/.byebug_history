continue
Sequel[database_name][:accounts]
database_name = get(Sequel.lit('current_database()')).to_sym
database_name
Sequel[database_name][:accounts]
run 'SHOW SEARCH_PATH'
exit
get(Sequel.lit('SHOW SEARCH_PATH'))
continue
Rodauth.create_database_authentication_functions(self, :table_name=>"#{database_name}_password.account_password_hashes")
conn.tables
conn = Sequel.connect(ENV['PASSWORD_DATABASE_URL'])
conn.tables
exit
conn.tables
conn.all
conn = Sequel.connect(ENV['PASSWORD_DATABASE_URL'])
conn
Rodauth.create_database_authentication_functions(self, :table_name=>"#{database_name}_password.account_password_hashes")
exit
Rodauth.create_database_authentication_functions(self, :table_name=>"#{database_name}_password.account_password_hashes")
continue
exit
database_name
continue
get Sequel.lit('current_database()')
exit
get Sequel.lit('current_database()')
get Sequel.lit('current_database')
Sequel.lit('current_database')
${DATABASE_NAME}
puts ${DATABASE_NAME}
puts $DATABASE_NAME
continue
Sequel[password_database_name][:account_password_hashes]
continue
c
continue
db[:schema_info_password].all
db[:schema_info_password]
db.tables
db
db.all
exit
Sequel[:auth_passwor][:bk]
Sequel[:auth_passwor]
Sequel[:auth_password]
Sequel[
Sequel[:auth][:accounts].to_json
Sequel[:auth][:accounts].column
Sequel[:auth][:accounts].methods
Sequel[:auth][:accounts].first
Sequel[:auth][:accounts]
Sequel[:auth]
Sequel
exit
ENV['DATABASE_NAME']
exit
ENV['DATABASE_NAME']
exit
user
user = get(Sequel.lit('current_user')).sub(/_password\z/, '')
continue
    end
      String :password_hash, :null=>false
      foreign_key :id, Sequel[database_name][:accounts], :primary_key=>true, :type=>:Bignum
create_table(:account_password_hashes) do
Sequel[database_name]
Sequel
